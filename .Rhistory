mean_v.dpost.cathodal.false=1, mean_v.dpost.sham.false=1,
sd_v = 1,
t0.pre.anodal=0.3, t0.dpost.anodal=0.3, t0.pre.cathodal=0.3,
t0.dpost.cathodal=0.3, t0.pre.sham=0.3, t0.dpost.sham=0.3)
length(pop.mean)
p.prior <- prior.p.dmc(
dists = rep("tnorm",length(pop.mean)),
p1=pop.mean,p2=pop.scale,
lower=c(0,0,0,0,0,0,0, #A and Bs
rep(NA,11), #mean_vs
0, #sd_v
rep(0.1,6)), #t0
upper=rep(NA,7), #A and Bs
rep(NA,11), #mean_vs
NA, #sd_v
rep(1,6) #t0
)
p.prior <- prior.p.dmc(
dists = rep("tnorm",length(pop.mean)),
p1=pop.mean,p2=pop.scale,
lower=c(0,0,0,0,0,0,0, #A and Bs
rep(NA,11), #mean_vs
0, #sd_v
rep(0.1,6)), #t0
upper=c(rep(NA,7), #A and Bs
rep(NA,11), #mean_vs
NA, #sd_v
rep(1,6)) #t0
)
pop.scale <- c(A=1,
B.pre.anodal=1, B.dpost.anodal=1, B.pre.cathodal=1, B.dpost.cathodal=1, B.pre.sham=1, B.dpost.sham=1,
mean_v.pre.anodal.true=1, mean_v.dpost.anodal.true=1, mean_v.pre.cathodal.true=1,
mean_v.dpost.cathodal.true=1, mean_v.pre.sham.true=1, mean_v.dpost.sham.true=1,
mean_v.pre.anodal.false=1, mean_v.dpost.anodal.false=1, mean_v.pre.cathodal.false=1,
mean_v.dpost.cathodal.false=1, mean_v.dpost.sham.false=1,
sd_v = 1,
t0.pre.anodal=0.5, t0.dpost.anodal=0.5, t0.pre.cathodal=0.5,
t0.dpost.cathodal=0.5, t0.pre.sham=0.5, t0.dpost.sham=0.5)
p.prior <- prior.p.dmc(
dists = rep("tnorm",length(pop.mean)),
p1=pop.mean,p2=pop.scale,
lower=c(0,0,0,0,0,0,0, #A and Bs
rep(NA,11), #mean_vs
0, #sd_v
rep(0.1,6)), #t0
upper=c(rep(NA,7), #A and Bs
rep(NA,11), #mean_vs
NA, #sd_v
rep(1,6)) #t0
)
starting_samples <- h.samples.dmc(nmc = 100, p.prior,data_model, thin = 10)
run.converge.dmc()
run.converge.dmc
h.run.converge.dmc()
h.run.converge.dmc
unstuck_samples <- h.run.unstuck.dmc(starting_samples, p.migrate = .05, cores = 7)
final_samples <- h.run.converge.dmc(samples=unstuck_samples, cores=7, verbose=TRUE, report=10, finalrun=TRUE,finalI=500, addtofinal = FALSE)
rm(list=ls())
library(tidyverse)
source ("dmc/dmc.R")
load_model ("LBA","lba_B.R")
#load data
load(file="data/trimmed_data.RData")
rm(list=ls())
library(tidyverse)
source ("dmc/dmc.R")
load_model ("LBA","lba_B.R")
#load data
load(file="data/clean/trimmed_data.RData")
trimmed_data$S = NA
trimmed_data$S[trimmed_data$stimulus=="1"]<-"aa"
trimmed_data$S[trimmed_data$stimulus=="2"]<-"bb"
trimmed_data$S[trimmed_data$stimulus=="3"]<-"cc"
trimmed_data$S[trimmed_data$stimulus=="4"]<-"dd"
trimmed_data$S[trimmed_data$stimulus=="5"]<-"ee"
trimmed_data$S[trimmed_data$stimulus=="6"]<-"ff"
trimmed_data$S = as.factor(trimmed_data$S)
trimmed_data$R = NA
trimmed_data$R[trimmed_data$response=="1"]<-"AA"
trimmed_data$R[trimmed_data$response=="2"]<-"BB"
trimmed_data$R[trimmed_data$response=="3"]<-"CC"
trimmed_data$R[trimmed_data$response=="4"]<-"DD"
trimmed_data$R[trimmed_data$response=="5"]<-"EE"
trimmed_data$R[trimmed_data$response=="6"]<-"FF"
trimmed_data$R = as.factor(trimmed_data$R)
dmc_data = trimmed_data %>%
filter(!is.na(R),  #remove NA values which indicate wrong key responses (27)
phase!="3") %>% #remove second phase (phase=3) - only compare pre vs delayed post
mutate(time = factor((phase=="2") +  (phase=="4")*2,levels=1:2,labels=c('pre','dpost') ),
RT=rt,
s=as.factor(as.numeric(subject))) %>% #Forces subject numbers to be between 0 and N
select(s,S,R,time,session,RT,subject) %>%
arrange(s,session,time,S)
dmc_data
model <- model.dmc(p.map=list(A="1",B=c("time","session"),mean_v=c("time","session","M"),sd_v="1",t0=c("time","session"), st0="1"),
match.map=list(M=list(aa="AA",bb="BB",cc="CC",dd="DD",ee="EE",ff="FF")),
factors=list(S=c("aa","bb","cc","dd","ee","ff"),time=c('pre','dpost'),session=c('anodal','cathodal','sham')),
constants=c(st0=0, sd_v = 1),
responses=c(aa="AA",bb="BB",cc="CC",dd="DD",ee="EE",ff="FF"),
type="norm")
data_model <- data.model.dmc(as.data.frame(dmc_data),model)
pop.mean <- c(A=1, B.pre.anodal=1, B.dpost.anodal=1,
B.pre.cathodal=1, B.dpost.cathodal=1,
B.pre.sham=1, B.dpost.sham=1,
mean_v.pre.anodal.true=1, mean_v.dpost.anodal.true=1,
mean_v.pre.cathodal.true=1, mean_v.dpost.cathodal.true=1,
mean_v.pre.sham.true=1, mean_v.dpost.sham.true=1,
mean_v.pre.anodal.false=1, mean_v.dpost.anodal.false=1,
mean_v.pre.cathodal.false=1, mean_v.dpost.cathodal.false=1,
mean_v.pre.sham.false=1, mean_v.dpost.sham.false=1,
t0.pre.anodal=.3,t0.dpost.anodal=0.3,
t0.pre.cathodal=.3,t0.dpost.cathodal=0.3,
t0.pre.sham=.3,t0.dpost.sham=0.3)
#scales are the same as used in tutorial 4.6 (though note that they are initially specified as very small, and then multiplied by 5 on line 82)
pop.scale <- c(A=1, B.pre.anodal=1, B.dpost.anodal=1,
B.pre.cathodal=1, B.dpost.cathodal=1,
B.pre.sham=1, B.dpost.sham=1,
mean_v.pre.anodal.true=1, mean_v.dpost.anodal.true=1,
mean_v.pre.cathodal.true=1, mean_v.dpost.cathodal.true=1,
mean_v.pre.sham.true=1, mean_v.dpost.sham.true=1,
mean_v.pre.anodal.false=1, mean_v.dpost.anodal.false=1,
mean_v.pre.cathodal.false=1, mean_v.dpost.cathodal.false=1,
mean_v.pre.sham.false=1, mean_v.dpost.sham.false=1,
t0.pre.anodal=.3,t0.dpost.anodal=0.3,
t0.pre.cathodal=.3,t0.dpost.cathodal=0.3,
t0.pre.sham=.3,t0.dpost.sham=0.3)
p.prior <- prior.p.dmc(
dists = rep("tnorm",25),
p1=pop.mean,p2=pop.scale,
lower=c(0,0,0,0,0,0,0,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,.1),
upper=c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,1)
)
p.prior <- prior.p.dmc(
dists = rep("tnorm",25),
p1=pop.mean,p2=pop.scale,
lower=c(0,0,0,0,0,0,0,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,.1,.1,.1,.1,.1,.1),
upper=c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,1,1,1,1,1,1)
)
starting_samples <- h.samples.dmc(nmc = 100, p.prior,data_model, thin = 5)#, pp.prior = pp.prior)
#save(starting_samples, file = "2_hierarchical_starting_samples_v2.RData")
unstuck_samples <- h.run.unstuck.dmc(starting_samples, p.migrate = .05, cores = 7)
#save(unstuck_samples, file = "2_hierarchical_unstuck_samples_v2.RData")
final_samples <- h.run.converge.dmc(h.samples.dmc(nmc=100, samples=unstuck_samples), nmc=100,cores=7,finalrun=T,finalI=500,minN=400,meanN=450)
save(final_samples, file = "data/derived/dmc_final_samples_person_level.RData")
h.pick.stuck.dmc(final_samples)
gelman.diag.dmc(final_samples)
effectiveSize.dmc(final_samples)
plot.dmc(final_samples,pll.chain=TRUE)
?plot.dmc
plot.dmc
plot.dmc(final_samples)
plot.dmc(final_samples,subject=2)
plot.dmc(final_samples,subject=3)
plot.dmc(final_samples,subject=47)
plot.pp.dmc(pp,style="cdf")
pp=h.post.predict.dmc(samples=final_samples)
plot.pp.dmc(pp,style="cdf")
plot.pp.dmc()
plot.pp.dmc
plot.pp.dmc(pp)
pp=h.post.predict.dmc(samples=final_samples,save.simulation=T,cores=7)
sim = do.call(rbind, pp)
head(sim)
count(sim,subject)
source ("dmc/dmc.R")
pp=h.post.predict.dmc(samples=final_samples,save.simulation=T,cores=7)
sim = do.call(rbind, pp)
head9sim
head(sim)
head(pp[[1]])
as.data.frame(dmc_data)
count(dmc_data,subject)
dmc_data = trimmed_data %>%
filter(!is.na(R),  #remove NA values which indicate wrong key responses (27)
phase!="3") %>% #remove second phase (phase=3) - only compare pre vs delayed post
mutate(time = factor((phase=="2") +  (phase=="4")*2,levels=1:2,labels=c('pre','dpost') ),
RT=rt,
s=as.numeric(as.factor(subject))) %>% #Forces subject numbers to be between 0 and N
select(s,S,R,time,session,RT,subject) %>%
arrange(s,session,time,S)
model <- model.dmc(p.map=list(A="1",B=c("time","session"),mean_v=c("time","session","M"),sd_v="1",t0=c("time","session"), st0="1"),
match.map=list(M=list(aa="AA",bb="BB",cc="CC",dd="DD",ee="EE",ff="FF")),
factors=list(S=c("aa","bb","cc","dd","ee","ff"),time=c('pre','dpost'),session=c('anodal','cathodal','sham')),
constants=c(st0=0, sd_v = 1),
responses=c(aa="AA",bb="BB",cc="CC",dd="DD",ee="EE",ff="FF"),
type="norm")
data_model <- data.model.dmc(as.data.frame(dmc_data),model)
dmc_data
count(dmc_data,subject)
dmc_data = trimmed_data %>%
filter(!is.na(R),  #remove NA values which indicate wrong key responses (27)
phase!="3") %>% #remove second phase (phase=3) - only compare pre vs delayed post
mutate(time = factor((phase=="2") +  (phase=="4")*2,levels=1:2,labels=c('pre','dpost') ),
RT=rt,
s=as.numeric(as.factor(subject))) %>% #Forces subject numbers to be between 0 and N
select(s,S,R,time,session,RT,subject) %>%
arrange(s,session,time,S)
count(dmc_data,subject)
load(file="data/clean/trimmed_data.RData")
dmc_data = trimmed_data %>%
filter(!is.na(R),  #remove NA values which indicate wrong key responses (27)
phase!="3") %>% #remove second phase (phase=3) - only compare pre vs delayed post
mutate(time = factor((phase=="2") +  (phase=="4")*2,levels=1:2,labels=c('pre','dpost') ),
RT=rt,
s=as.factor(as.numeric(as.factor(subject)))) %>% #Forces subject numbers to be between 0 and N
select(s,S,R,time,session,RT,subject) %>%
arrange(s,session,time,S)
trimmed_data$S = NA
trimmed_data$S[trimmed_data$stimulus=="1"]<-"aa"
trimmed_data$S[trimmed_data$stimulus=="2"]<-"bb"
trimmed_data$S[trimmed_data$stimulus=="3"]<-"cc"
trimmed_data$S[trimmed_data$stimulus=="4"]<-"dd"
trimmed_data$S[trimmed_data$stimulus=="5"]<-"ee"
trimmed_data$S[trimmed_data$stimulus=="6"]<-"ff"
trimmed_data$S = as.factor(trimmed_data$S)
trimmed_data$R = NA
trimmed_data$R[trimmed_data$response=="1"]<-"AA"
trimmed_data$R[trimmed_data$response=="2"]<-"BB"
trimmed_data$R[trimmed_data$response=="3"]<-"CC"
trimmed_data$R[trimmed_data$response=="4"]<-"DD"
trimmed_data$R[trimmed_data$response=="5"]<-"EE"
trimmed_data$R[trimmed_data$response=="6"]<-"FF"
trimmed_data$R = as.factor(trimmed_data$R)
dmc_data = trimmed_data %>%
filter(!is.na(R),  #remove NA values which indicate wrong key responses (27)
phase!="3") %>% #remove second phase (phase=3) - only compare pre vs delayed post
mutate(time = factor((phase=="2") +  (phase=="4")*2,levels=1:2,labels=c('pre','dpost') ),
RT=rt,
s=as.factor(as.numeric(as.factor(subject)))) %>% #Forces subject numbers to be between 0 and N
select(s,S,R,time,session,RT,subject) %>%
arrange(s,session,time,S)
count(dmc_data,subject)
trimmed_data
dmc_data = trimmed_data %>%
filter(!is.na(R),  #remove NA values which indicate wrong key responses (27)
phase!="3") %>% #remove second phase (phase=3) - only compare pre vs delayed post
mutate(time = factor((phase=="2") +  (phase=="4")*2,levels=1:2,labels=c('pre','dpost') ),
RT=rt,
s=as.factor(as.numeric(as.factor(subject)))) %>% #Forces subject numbers to be between 0 and N
select(s,S,R,time,session,RT,subject) %>%
arrange(s,session,time,S)
dmc_data
count(dmc_data,subject)
dim(sim)
head(sim)
count(sim,reps)
unique(dmc_data$subject)
unique(sim$reps)
subjects = unique(dmc_data$subject)
ctr = 1
sim$subject[i] = subjects[1]
for(i in 2:nrows(sim)){
#every new subject increment counter
if(reps[i]<reps[i-1]){
ctr = ctr + 1
}
sim$subject[i] = subjects[ctr]
print(i)
}
subjects = unique(dmc_data$subject)
ctr = 1
sim$subject[i] = subjects[1]
for(i in 2:nrow(sim)){
#every new subject increment counter
if(reps[i]<reps[i-1]){
ctr = ctr + 1
}
sim$subject[i] = subjects[ctr]
print(i)
}
subjects = unique(dmc_data$subject)
ctr = 1
sim$subject[i] = subjects[1]
for(i in 2:nrow(sim)){
#every new subject increment counter
if(sim$reps[i]<sim$reps[i-1]){
ctr = ctr + 1
}
sim$subject[i] = subjects[ctr]
print(i)
}
subject = c(1,3,5,7)
sort(subject)
rank(subject)
order(subject)
subject = c(1,1,3,3,5,6,7,7)
order(subject)
rank(subject)
sort(subject)
?rank
rank(subject,ties.method = "first")
rank(subject,ties.method = "min")
sim$new_subject = sim$reps[i]<sim$reps[i-1]
sim = do.call(rbind, pp) %>%
mutate(prev_reps = lag(reps),
new_subject = reps < prev_reps
)
sim
head(sim)
sim = do.call(rbind, pp) %>%
mutate(prev_reps = lag(reps),
new_subject = as.numeric(reps < prev_reps))
sim$new_subject[1] = 1
head(sim)
sim$subject = cumsum(sim$new_subject)
sim$subject
count(sim,subject)
rownames(sim)
head(sim)
sim$subject = cumsum(sim$new_subject)
head(sim)
tolower('AA')
sim = sim %>%
#mutate(s = rownames(sim),
#        s = gsub("\\..*","",s)) %>%
mutate(correct = as.numeric(S == tolower(R)) %>%
group_by(s,time,session,reps) %>%
mutate(accuracy = mean(correct)) %>%
group_by(time,session,reps) %>%
summarise(mean_accuracy = mean(accuracy)) %>%
group_by(time,session) %>%
summarise(prop_m = mean(mean_accuracy),
prop_l = quantile(mean_accuracy,0.025),
prop_u = quantile(mean_accuracy,0.975),
source = "Model")
)
sim = sim %>%
#mutate(s = rownames(sim),
#        s = gsub("\\..*","",s)) %>%
mutate(correct = as.numeric(S == tolower(R))) %>%
group_by(s,time,session,reps) %>%
mutate(accuracy = mean(correct)) %>%
group_by(time,session,reps) %>%
summarise(mean_accuracy = mean(accuracy)) %>%
group_by(time,session) %>%
summarise(prop_m = mean(mean_accuracy),
prop_l = quantile(mean_accuracy,0.025),
prop_u = quantile(mean_accuracy,0.975),
source = "Model")
sim = sim %>%
#mutate(s = rownames(sim),
#        s = gsub("\\..*","",s)) %>%
mutate(correct = as.numeric(S == tolower(R))) %>%
group_by(subject,time,session,reps) %>%
mutate(accuracy = mean(correct)) %>%
group_by(time,session,reps) %>%
summarise(mean_accuracy = mean(accuracy)) %>%
group_by(time,session) %>%
summarise(prop_m = mean(mean_accuracy),
prop_l = quantile(mean_accuracy,0.025),
prop_u = quantile(mean_accuracy,0.975),
source = "Model")
data = lapply(pp, function(x) attr(x, "data"))
data = do.call(rbind, data)
head(data)
count(data,subject)
data = lapply(pp, function(x) attr(x, "data"))
data = do.call(rbind, data)
data = data %>%
#mutate(s = rownames(data),
#       s = gsub("\\..*","",s)) %>%
mutate(correct = as.numeric(S == tolower(R))) %>%
group_by(subject,time,session) %>%
mutate(accuracy = mean(correct)) %>%
group_by(time,session) %>%
summarise(mean_accuracy = mean(accuracy)) %>%
group_by(time,session) %>%
summarise(prop_m = mean(mean_accuracy),
prop_l = NA,#prop_m - sd(prop)/sqrt(n()),
prop_u = NA,#prop_m + sd(prop)/sqrt(n()),
source = "Data")
pp_smry =  bind_rows(data,sim) %>%
ungroup()
ggplot(data=pp_smry,aes(x=time,y=prop_m,group=session,colour=source)) +
geom_errorbar(aes(ymax = prop_u, ymin = prop_l), width= 0.2) +
geom_point(pch=21, size=2) +
geom_line(aes(group=source)) +
ylab("Proportion Correct") + xlab('Time')
ggplot(data=pp_smry,aes(x=time,y=prop_m,group=session,colour=source)) +
geom_errorbar(aes(ymax = prop_u, ymin = prop_l), width= 0.2) +
geom_point(pch=21, size=2) +
geom_line(aes(group=source)) +
ylab("Proportion Correct") + xlab('Time') +
scale_y_continuous(breaks = seq(0,1,0.25),limits = c(0,1))
ggplot(data=pp_smry,aes(x=time,y=prop_m,group=source,colour=source)) +
geom_errorbar(aes(ymax = prop_u, ymin = prop_l), width= 0.2) +
geom_point(pch=21, size=2) +
geom_line(aes(group=source)) +
ylab("Proportion Correct") + xlab('Time') +
scale_y_continuous(breaks = seq(0.5,1,0.1),limits = c(0.5,1)) +
facet_grid(~session)
rm(list=ls())
library(tidyverse)
source ("dmc/dmc.R")
load_model ("LBA","lba_B.R")
#load data
load(file="data/clean/trimmed_data.RData")
#Construct trimmed data frame which exludes missing observations
trimmed_data$S = NA
trimmed_data$S[trimmed_data$stimulus=="1"]<-"aa"
trimmed_data$S[trimmed_data$stimulus=="2"]<-"bb"
trimmed_data$S[trimmed_data$stimulus=="3"]<-"cc"
trimmed_data$S[trimmed_data$stimulus=="4"]<-"dd"
trimmed_data$S[trimmed_data$stimulus=="5"]<-"ee"
trimmed_data$S[trimmed_data$stimulus=="6"]<-"ff"
trimmed_data$S = as.factor(trimmed_data$S)
trimmed_data$R = NA
trimmed_data$R[trimmed_data$response=="1"]<-"AA"
trimmed_data$R[trimmed_data$response=="2"]<-"BB"
trimmed_data$R[trimmed_data$response=="3"]<-"CC"
trimmed_data$R[trimmed_data$response=="4"]<-"DD"
trimmed_data$R[trimmed_data$response=="5"]<-"EE"
trimmed_data$R[trimmed_data$response=="6"]<-"FF"
trimmed_data$R = as.factor(trimmed_data$R)
dmc_data = trimmed_data %>%
filter(!is.na(R),  #remove NA values which indicate wrong key responses (27)
phase!="3") %>% #remove second phase (phase=3) - only compare pre vs delayed post
mutate(time = factor((phase=="2") +  (phase=="4")*2,levels=1:2,labels=c('pre','dpost') ),
RT=rt,
s=as.factor(as.numeric(as.factor(subject)))) %>% #Forces subject numbers to be between 0 and N
select(s,S,R,time,session,RT,subject) %>%
arrange(s,session,time,S)
model <- model.dmc(p.map=list(A="1",B=c("time","session"),mean_v=c("time","session","M"),sd_v=c("time","session","M"),t0=c("time","session"), st0="1"),
match.map=list(M=list(aa="AA",bb="BB",cc="CC",dd="DD",ee="EE",ff="FF")),
factors=list(S=c("aa","bb","cc","dd","ee","ff"),time=c('pre','dpost'),session=c('anodal','cathodal','sham')),
constants=c(st0=0, sd_v.dpost.sham.false = 1),
responses=c(aa="AA",bb="BB",cc="CC",dd="DD",ee="EE",ff="FF"),
type="norm")
data_model <- data.model.dmc(as.data.frame(dmc_data),model)
pop.mean <- c(A=1, B.pre.anodal=1, B.dpost.anodal=1,
B.pre.cathodal=1, B.dpost.cathodal=1,
B.pre.sham=1, B.dpost.sham=1,
mean_v.pre.anodal.true=1, mean_v.dpost.anodal.true=1,
mean_v.pre.cathodal.true=1, mean_v.dpost.cathodal.true=1,
mean_v.pre.sham.true=1, mean_v.dpost.sham.true=1,
mean_v.pre.anodal.false=1, mean_v.dpost.anodal.false=1,
mean_v.pre.cathodal.false=1, mean_v.dpost.cathodal.false=1,
mean_v.pre.sham.false=1, mean_v.dpost.sham.false=1,
sd_v.pre.anodal.true=1, sd_v.dpost.anodal.true=1,
sd_v.pre.cathodal.true=1, sd_v.dpost.cathodal.true=1,
sd_v.pre.sham.true=1, sd_v.dpost.sham.true=1,
sd_v.pre.anodal.false=1, sd_v.dpost.anodal.false=1,
sd_v.pre.cathodal.false=1, sd_v.dpost.cathodal.false=1,
sd_v.pre.sham.false=1,
t0.pre.anodal=.3,t0.dpost.anodal=0.3,
t0.pre.cathodal=.3,t0.dpost.cathodal=0.3,
t0.pre.sham=.3,t0.dpost.sham=0.3)
pop.scale <- c(A=1, B.pre.anodal=1, B.dpost.anodal=1,
B.pre.cathodal=1, B.dpost.cathodal=1,
B.pre.sham=1, B.dpost.sham=1,
mean_v.pre.anodal.true=1, mean_v.dpost.anodal.true=1,
mean_v.pre.cathodal.true=1, mean_v.dpost.cathodal.true=1,
mean_v.pre.sham.true=1, mean_v.dpost.sham.true=1,
mean_v.pre.anodal.false=1, mean_v.dpost.anodal.false=1,
mean_v.pre.cathodal.false=1, mean_v.dpost.cathodal.false=1,
mean_v.pre.sham.false=1, mean_v.dpost.sham.false=1,
sd_v.pre.anodal.true=1, sd_v.dpost.anodal.true=1,
sd_v.pre.cathodal.true=1, sd_v.dpost.cathodal.true=1,
sd_v.pre.sham.true=1, sd_v.dpost.sham.true=1,
sd_v.pre.anodal.false=1, sd_v.dpost.anodal.false=1,
sd_v.pre.cathodal.false=1, sd_v.dpost.cathodal.false=1,
sd_v.pre.sham.false=1,
t0.pre.anodal=.3,t0.dpost.anodal=0.3,
t0.pre.cathodal=.3,t0.dpost.cathodal=0.3,
t0.pre.sham=.3,t0.dpost.sham=0.3)
p.prior <- prior.p.dmc(
dists = rep("tnorm",25),
p1=pop.mean,p2=pop.scale,
lower=c(0,0,0,0,0,0,0,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,0,0,0,0,0,0,0,.1,.1,.1,.1,.1,.1),
upper=c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,1,1,1,1,1,1)
)
p.prior <- prior.p.dmc(
dists = rep("tnorm",32),
p1=pop.mean,p2=pop.scale,
lower=c(0,0,0,0,0,0,0,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,0,0,0,0,0,0,0,0,.1,.1,.1,.1,.1,.1),
upper=c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,1,1,1,1,1,1)
)
p1=pop.mean
length(p1)
lower=c(0,0,0,0,0,0,0,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,0,0,0,0,0,0,0,0,.1,.1,.1,.1,.1,.1)
upper=c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,1,1,1,1,1,1)
length(lower)
length(upper)
p.prior <- prior.p.dmc(
dists = rep("tnorm",36),
p1=pop.mean,p2=pop.scale,
lower=c(0,0,0,0,0,0,0,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,0,0,0,0,0,0,0,00,0,0,0,0,0,.1,.1,.1,.1,.1,.1),
upper=c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,1,1,1,1,1,1)
)
lower=c(0,0,0,0,0,0,0,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,0,0,0,0,0,0,0,00,0,0,0,0,0,.1,.1,.1,.1,.1,.1)
length(lower)
p.prior <- prior.p.dmc(
dists = rep("tnorm",36),
p1=pop.mean,p2=pop.scale,
lower=c(0,0,0,0,0,0,0,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,0,0,0,0,0,0,0,0,0,0,0,0,.1,.1,.1,.1,.1,.1),
upper=c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,1,1,1,1,1,1)
)
length(upper)
upper=c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,1,1,1,1,1,1)
length(upper)
t0.pre.sham=.3,t0.dpost.sham=0.3)
p.prior <- prior.p.dmc(
dists = rep("tnorm",36),
p1=pop.mean,p2=pop.scale,
lower=c(0,0,0,0,0,0,0,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,0,0,0,0,0,0,0,0,0,0,0,0,.1,.1,.1,.1,.1,.1),
upper=c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,1,1,1,1,1,1)
)
starting_samples <- h.samples.dmc(nmc = 100, p.prior,data_model, thin = 5)#, pp.prior = pp.prior)
#save(starting_samples, file = "2_hierarchical_starting_samples_v2.RData")
unstuck_samples <- h.run.unstuck.dmc(starting_samples, p.migrate = .05, cores = 7)
#save(unstuck_samples, file = "2_hierarchical_unstuck_samples_v2.RData")
final_samples <- h.run.converge.dmc(h.samples.dmc(nmc=100, samples=unstuck_samples), nmc=100,cores=7,finalrun=T,finalI=500,minN=400,meanN=450)
