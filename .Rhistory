#scales are the same as used in tutorial 4.6 (though note that they are initially specified as very small, and then multiplied by 5 on line 82)
pop.scale <- c(A=10, B.pre.anodal=10, B.dpost.anodal=10,
B.pre.cathodal=10, B.dpost.cathodal=10,
B.pre.sham=10, B.dpost.sham=10,
mean_v.pre.anodal.true=20, mean_v.dpost.anodal.true=20,
mean_v.pre.cathodal.true=20, mean_v.dpost.cathodal.true=20,
mean_v.pre.sham.true=20, mean_v.dpost.sham.true=20,
sd_v.pre.anodal=5, sd_v.dpost.anodal=5,
sd_v.pre.cathodal=5, sd_v.dpost.cathodal=5,
sd_v.pre.sham=5, sd_v.dpost.sham=5,
t0.pre.anodal=.3,t0.dpost.anodal=0.3,
t0.pre.cathodal=.3,t0.dpost.cathodal=0.3,
t0.pre.sham=.3,t0.dpost.sham=0.3)
p.prior <- prior.p.dmc(
dists = rep("tnorm",25),
p1=pop.mean,p2=pop.scale,
lower=c(0,0,0,0,0,0,0,NA,NA,NA,NA,NA,NA,0,0,0,0,0,0,.05,.05,.05,.05,.05,.05),
upper=c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,1,1,1,1,1,1)
)
#population level priors
mu.prior <- prior.p.dmc(
dists = rep("tnorm",25),
p1=pop.mean,
p2=pop.scale,
lower=c(0,0,0,0,0,0,0,NA,NA,NA,NA,NA,NA,0,0,0,0,0,0,.05,.05,.05,.05,.05,.05),
upper=c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,1,1,1,1,1,1)
)
# sigma.prior <- prior.p.dmc(
#   dists = rep("beta", length(p.prior)),
#   p1=c(A=1, B.pre.anodal=1, B.dpost.anodal=1,
#                 B.pre.cathodal=1, B.dpost.cathodal=1,
#                 B.pre.sham=1, B.dpost.sham=1,
#                 mean_v.pre.anodal.true=1, mean_v.dpost.anodal.true=1,
#                 mean_v.pre.cathodal.true=1, mean_v.dpost.cathodal.true=1,
#                 mean_v.pre.sham.true=1, mean_v.dpost.sham.true=1,
#                 mean_v.pre.anodal.false=1, mean_v.dpost.anodal.false=1,
#                 mean_v.pre.cathodal.false=1, mean_v.dpost.cathodal.false=1,
#                 mean_v.pre.sham.false=1, mean_v.dpost.sham.false=1,t0=1),
#   p2=rep(1,20) #All sd priors are uniform bounded between 0 and 1.
# )
sigma.prior <- prior.p.dmc(
dists = rep("tnorm", length(p.prior)),
p1=c(A=0, B.pre.anodal=0, B.dpost.anodal=0,
B.pre.cathodal=0, B.dpost.cathodal=0,
B.pre.sham=0, B.dpost.sham=0,
mean_v.pre.anodal.true=0, mean_v.dpost.anodal.true=0,
mean_v.pre.cathodal.true=0, mean_v.dpost.cathodal.true=0,
mean_v.pre.sham.true=0, mean_v.dpost.sham.true=0,
sd_v.pre.anodal=0, sd_v.dpost.anodal=0,
sd_v.pre.cathodal=0, sd_v.dpost.cathodal=0,
sd_v.pre.sham=0, sd_v.dpost.sham=0,
t0.pre.anodal=0,t0.dpost.anodal=0,
t0.pre.cathodal=0,t0.dpost.cathodal=0,
t0.pre.sham=0,t0.dpost.sham=0),
p2=c(A=5, B.pre.anodal=5, B.dpost.anodal=5,
B.pre.cathodal=5, B.dpost.cathodal=5,
B.pre.sham=5, B.dpost.sham=5,
mean_v.pre.anodal.true=5, mean_v.dpost.anodal.true=5,
mean_v.pre.cathodal.true=5, mean_v.dpost.cathodal.true=5,
mean_v.pre.sham.true=5, mean_v.dpost.sham.true=5,
sd_v.pre.anodal=2, sd_v.dpost.anodal=2,
sd_v.pre.cathodal=2, sd_v.dpost.cathodal=2,
sd_v.pre.sham=2, sd_v.dpost.sham=2,
t0.pre.anodal=1,t0.dpost.anodal=1,
t0.pre.cathodal=1,t0.dpost.cathodal=1,
t0.pre.sham=1,t0.dpost.sham=1),
lower=rep(0,25),
upper=rep(NA,25)
)
pp.prior
plot.prior(mu.prior,ylim = c(0,20))
?plot.prior
plot.prior
plot.prior(1,mu.prior,ylim = c(0,20))
plot.prior(1,mu.prior,ylim = c(0,20))
plot.prior(1,mu.prior)
plot.prior(2,mu.prior)
plot.prior(1:10,mu.prior)
plot.prior(10,mu.prior)
rm(list=ls())
library(tidyverse)
#setwd("~/stim_ids")
source ("dmc/dmc.R")
load_model ("LBA","lba_B.R")
#load data
load(file="data/clean/trimmed_data.RData")
#Construct trimmed data frame which exludes missing observations
trimmed_data$S = NA
trimmed_data$S[trimmed_data$stimulus=="1"]<-"aa"
trimmed_data$S[trimmed_data$stimulus=="2"]<-"bb"
trimmed_data$S[trimmed_data$stimulus=="3"]<-"cc"
trimmed_data$S[trimmed_data$stimulus=="4"]<-"dd"
trimmed_data$S[trimmed_data$stimulus=="5"]<-"ee"
trimmed_data$S[trimmed_data$stimulus=="6"]<-"ff"
trimmed_data$S = as.factor(trimmed_data$S)
trimmed_data$R = NA
trimmed_data$R[trimmed_data$response=="1"]<-"AA"
trimmed_data$R[trimmed_data$response=="2"]<-"BB"
trimmed_data$R[trimmed_data$response=="3"]<-"CC"
trimmed_data$R[trimmed_data$response=="4"]<-"DD"
trimmed_data$R[trimmed_data$response=="5"]<-"EE"
trimmed_data$R[trimmed_data$response=="6"]<-"FF"
trimmed_data$R = as.factor(trimmed_data$R)
trimmed_data$R
head(trimmed_data)
load("data/derived/dmc_final_samples_hierarchical_wide_priors.RData")
smry = summary.dmc(final_samples,start=400)
smry = summary.dmc(final_samples,start=400,hyper=T)
smry
samples.dmc
dmc_data = trimmed_data %>%
filter(!is.na(R),  #remove NA values which indicate wrong key responses (27)
phase!="3") %>% #remove second phase (phase=3) - only compare pre vs delayed post
mutate(time = factor((phase=="2") +  (phase=="4")*2,levels=1:2,labels=c('pre','dpost') ),
RT=rt,
s=as.factor(as.numeric(as.character(subject)))) %>% #Forces subject numbers to be between 0 and N
select(s,S,R,time,session,RT,subject) %>%
arrange(s,session,time,S)
dmc_data
dmc_data %>% mutate(correct = as.numeric(R == tolower(S)))
dmc_data %>% mutate(correct = as.numeric(S == tolower(R)))
dmc_data
dmc_data
dmc_data %>% mutate(correct = as.numeric(S == tolower(R)))
dmc_data %>% mutate(correct = as.numeric(S == tolower(R))) %>%
group_by(subject,session,time) %>%
summarise(n = n())
dmc_data %>% mutate(correct = as.numeric(S == tolower(R))) %>%
group_by(subject,session,time) %>%
summarise(n = sum(correct==0))
dmc_data %>% mutate(correct = as.numeric(S == tolower(R))) %>%
group_by(subject,session,time) %>%
summarise(n = n(),
n_wrong = sum(correct==0))
dmc_data %>% mutate(correct = as.numeric(S == tolower(R))) %>%
group_by(subject,session,time) %>%
summarise(n = n(),
n_wrong = sum(correct==0)) %>%
ungroup() %>%
summarise(max_n = max(n),
min_n = min(n),
max_nw = max(n_wrong),
min_nw = min(n_wrong))
x = dmc_data %>% mutate(correct = as.numeric(S == tolower(R))) %>%
group_by(subject,session,time) %>%
summarise(n = n(),
n_wrong = sum(correct==0))
hist(x$n)
hist(x$n_wrong)
hist(x$n_wrong,breaks=10)
hist(x$n_wrong,breaks=15)
hist(x$n_wrong,bins=15)
?hist
hist(x$n_wrong,breaks=20)
load(file = "data/derived/dmc_final_samples2_hierarchical_wide_priors.RData")
pp=h.post.predict.dmc(samples=final_samples2,save.simulation=T,cores=7,censor=c(0,2))
sim = do.call(rbind, pp) %>%
mutate(prev_reps = lag(reps),
new_subject = as.numeric(reps < prev_reps))
rm(list=ls())
library(tidyverse)
#setwd("~/stim_ids")
source ("dmc/dmc.R")
load_model ("LBA","lba_B.R")
load(file="data/clean/trimmed_data.RData")
#Construct trimmed data frame which exludes missing observations
trimmed_data$S = NA
trimmed_data$S[trimmed_data$stimulus=="1"]<-"aa"
trimmed_data$S[trimmed_data$stimulus=="2"]<-"bb"
trimmed_data$S[trimmed_data$stimulus=="3"]<-"cc"
trimmed_data$S[trimmed_data$stimulus=="4"]<-"dd"
trimmed_data$S[trimmed_data$stimulus=="5"]<-"ee"
trimmed_data$S[trimmed_data$stimulus=="6"]<-"ff"
trimmed_data$S = as.factor(trimmed_data$S)
trimmed_data$R = NA
trimmed_data$R[trimmed_data$response=="1"]<-"AA"
trimmed_data$R[trimmed_data$response=="2"]<-"BB"
trimmed_data$R[trimmed_data$response=="3"]<-"CC"
trimmed_data$R[trimmed_data$response=="4"]<-"DD"
trimmed_data$R[trimmed_data$response=="5"]<-"EE"
trimmed_data$R[trimmed_data$response=="6"]<-"FF"
trimmed_data$R = as.factor(trimmed_data$R)
dmc_data = trimmed_data %>%
filter(!is.na(R),  #remove NA values which indicate wrong key responses (27)
phase!="3") %>% #remove second phase (phase=3) - only compare pre vs delayed post
mutate(time = factor((phase=="2") +  (phase=="4")*2,levels=1:2,labels=c('pre','dpost') ),
RT=rt,
s=as.factor(as.numeric(as.character(subject)))) %>% #Forces subject numbers to be between 0 and N
select(s,S,R,time,session,RT,subject) %>%
arrange(s,session,time,S)
load(file = "data/derived/dmc_final_samples2_hierarchical_wide_priors.RData")
pp=h.post.predict.dmc(samples=final_samples2,save.simulation=T,cores=7,censor=c(0,2))
sim = do.call(rbind, pp) %>%
mutate(prev_reps = lag(reps),
new_subject = as.numeric(reps < prev_reps))
sim$new_subject[1] = 1
sim$subject = cumsum(sim$new_subject)
sim_rt = sim %>%
mutate(correct = as.numeric(S == tolower(R))) %>%
group_by(subject,time,session,reps,correct) %>%
#count number of responses of each type in each condition
mutate(count = n()) %>%
#filter out responses that were made less than 5 times
filter(count >= 5) %>%
#generate quantiles
summarise(q10 = quantile(RT,.1),
q30 = quantile(RT,.3),
q50 = quantile(RT,.5),
q70 = quantile(RT,.7),
q90 = quantile(RT,.9)) %>%
gather(key=quantile,value=RT,q10:q90) %>%
#average across subjects
group_by(time,session,correct,quantile,reps) %>%
summarise(RT = mean(RT)) %>%
#get CIs
group_by(time,session,correct,quantile) %>%
summarise(RT_m = mean(RT),
RT_l = quantile(RT,0.025),
RT_u = quantile(RT,0.975),
source = "Model")
data_rt = data %>%
mutate(correct = as.numeric(S == tolower(R))) %>%
group_by(subject,time,session,correct) %>%
#count number of responses of each type in each condition
mutate(count = n()) %>%
#filter out responses that were made less than 5 times
filter(count >= 5) %>%
#generate quantiles
summarise(q10 = quantile(RT,.1),
q30 = quantile(RT,.3),
q50 = quantile(RT,.5),
q70 = quantile(RT,.7),
q90 = quantile(RT,.9)) %>%
gather(key=quantile,value=RT,q10:q90) %>%
#average across subjects
group_by(time,session,correct,quantile) %>%
summarise(RT_m = mean(RT),
RT_l = NA, #RT_m - sd(RT)/sqrt(n()),
RT_u = NA, #RT_m + sd(RT)/sqrt(n()),
source = "Data")
data = lapply(pp, function(x) attr(x, "data"))
data = do.call(rbind, data)
data_rt = data %>%
mutate(correct = as.numeric(S == tolower(R))) %>%
group_by(subject,time,session,correct) %>%
#count number of responses of each type in each condition
mutate(count = n()) %>%
#filter out responses that were made less than 5 times
filter(count >= 5) %>%
#generate quantiles
summarise(q10 = quantile(RT,.1),
q30 = quantile(RT,.3),
q50 = quantile(RT,.5),
q70 = quantile(RT,.7),
q90 = quantile(RT,.9)) %>%
gather(key=quantile,value=RT,q10:q90) %>%
#average across subjects
group_by(time,session,correct,quantile) %>%
summarise(RT_m = mean(RT),
RT_l = NA, #RT_m - sd(RT)/sqrt(n()),
RT_u = NA, #RT_m + sd(RT)/sqrt(n()),
source = "Data")
pp_rt =  bind_rows(data_rt,sim_rt) %>%
ungroup() %>%
mutate(Correct = factor(correct,levels=c(1,0),labels=c('Correct','Incorrect')),
Time = factor(time,levels=c('pre','dpost'),labels=c('Pre','Delayed Post')),
Session = factor(session,levels=c('anodal','cathodal','sham'),labels=c('Anodal','Cathodal','Sham'))) %>%
ggplot(aes(x=Time,y=RT_m*1000,group=quantile,colour=source)) +
geom_errorbar(aes(ymax = RT_u*1000, ymin = RT_l*1000), width= 0.2) +
geom_point(pch=21, size=2) +
geom_line(aes(group=interaction(quantile,source))) +
ylab("Response Time (ms)") + xlab('Time') +
scale_y_continuous(breaks = seq(500,2000,500),limits = c(250,2000)) +
facet_grid(Correct~Session) #+ theme_minimal()
ggsave("figures/fits_rt.pdf",pp_rt,height=5,width=6)
sim_acc = sim %>%
#mutate(s = rownames(sim),
#        s = gsub("\\..*","",s)) %>%
mutate(correct = as.numeric(S == tolower(R))) %>%
group_by(subject,time,session,reps) %>%
mutate(accuracy = mean(correct)) %>%
group_by(time,session,reps) %>%
summarise(mean_accuracy = mean(accuracy)) %>%
group_by(time,session) %>%
summarise(prop_m = mean(mean_accuracy),
prop_l = quantile(mean_accuracy,0.025),
prop_u = quantile(mean_accuracy,0.975),
source = "Model")
data = lapply(pp, function(x) attr(x, "data"))
data = do.call(rbind, data)
data_acc = data %>%
#mutate(s = rownames(data),
#       s = gsub("\\..*","",s)) %>%
mutate(correct = as.numeric(S == tolower(R))) %>%
group_by(subject,time,session) %>%
mutate(accuracy = mean(correct)) %>%
group_by(time,session) %>%
summarise(prop_m = mean(accuracy),
prop_l = NA,#prop_m - sd(prop)/sqrt(n()),
prop_u = NA,#prop_m + sd(prop)/sqrt(n()),
source = "Data")
pp_acc =  bind_rows(data_acc,sim_acc) %>%
ungroup() %>%
mutate(Time = factor(time,levels=c('pre','dpost'),labels=c('Pre','Delayed Post')),
Session = factor(session,levels=c('anodal','cathodal','sham'),labels=c('Anodal','Cathodal','Sham'))) %>%
ggplot(aes(x=Time,y=prop_m,group=source,colour=source)) +
geom_errorbar(aes(ymax = prop_u, ymin = prop_l), width= 0.2) +
geom_point(pch=21, size=2) +
geom_line(aes(group=source)) +
ylab("Proportion Correct") + xlab('Time') +
scale_y_continuous(breaks = seq(0.5,1,0.1),limits = c(0.5,1)) +
facet_grid(.~Session)
ggsave("figures/fits_acc.pdf",pp_acc,height=5,width=6)
rm(list=ls())
library(tidyverse)
#setwd("~/stim_ids")
source ("dmc/dmc.R")
load_model ("LBA","lba_B.R")
#load data
load(file="data/clean/trimmed_data.RData")
#Construct trimmed data frame which exludes missing observations
trimmed_data$S = NA
trimmed_data$S[trimmed_data$stimulus=="1"]<-"aa"
trimmed_data$S[trimmed_data$stimulus=="2"]<-"bb"
trimmed_data$S[trimmed_data$stimulus=="3"]<-"cc"
trimmed_data$S[trimmed_data$stimulus=="4"]<-"dd"
trimmed_data$S[trimmed_data$stimulus=="5"]<-"ee"
trimmed_data$S[trimmed_data$stimulus=="6"]<-"ff"
trimmed_data$S = as.factor(trimmed_data$S)
trimmed_data$R = NA
trimmed_data$R[trimmed_data$response=="1"]<-"AA"
trimmed_data$R[trimmed_data$response=="2"]<-"BB"
trimmed_data$R[trimmed_data$response=="3"]<-"CC"
trimmed_data$R[trimmed_data$response=="4"]<-"DD"
trimmed_data$R[trimmed_data$response=="5"]<-"EE"
trimmed_data$R[trimmed_data$response=="6"]<-"FF"
trimmed_data$R = as.factor(trimmed_data$R)
dmc_data = trimmed_data %>%
filter(!is.na(R),  #remove NA values which indicate wrong key responses (27)
phase!="3") %>% #remove second phase (phase=3) - only compare pre vs delayed post
mutate(time = factor((phase=="2") +  (phase=="4")*2,levels=1:2,labels=c('pre','dpost') ),
RT=rt,
s=as.factor(as.numeric(as.character(subject)))) %>% #Forces subject numbers to be between 0 and N
select(s,S,R,time,session,RT,subject) %>%
arrange(s,session,time,S)
dmc_data
rm(list=ls())
library(tidyverse)
#setwd("~/stim_ids")
source ("dmc/dmc.R")
load_model ("LBA","lba_B.R")
#load data
load(file="data/clean/trimmed_data.RData")
#Construct trimmed data frame which exludes missing observations
trimmed_data$S = NA
trimmed_data$S[trimmed_data$stimulus=="1"]<-"aa"
trimmed_data$S[trimmed_data$stimulus=="2"]<-"bb"
trimmed_data$S[trimmed_data$stimulus=="3"]<-"cc"
trimmed_data$S[trimmed_data$stimulus=="4"]<-"dd"
trimmed_data$S[trimmed_data$stimulus=="5"]<-"ee"
trimmed_data$S[trimmed_data$stimulus=="6"]<-"ff"
trimmed_data$S = as.factor(trimmed_data$S)
trimmed_data$R = NA
trimmed_data$R[trimmed_data$response=="1"]<-"AA"
trimmed_data$R[trimmed_data$response=="2"]<-"BB"
trimmed_data$R[trimmed_data$response=="3"]<-"CC"
trimmed_data$R[trimmed_data$response=="4"]<-"DD"
trimmed_data$R[trimmed_data$response=="5"]<-"EE"
trimmed_data$R[trimmed_data$response=="6"]<-"FF"
trimmed_data$R = as.factor(trimmed_data$R)
dmc_data = trimmed_data %>%
filter(!is.na(R),  #remove NA values which indicate wrong key responses (27)
phase!="3") %>% #remove second phase (phase=3) - only compare pre vs delayed post
mutate(time = factor((phase=="2") +  (phase=="4")*2,levels=1:2,labels=c('pre','dpost') ),
condition = case_when(
time=="pre" ~ 1,
time=="dpost" & session == "anodal" ~ 2,
time=="dpost" & session == "cathodal" ~ 3,
time=="dpost" & session == "sham" ~ 4
),
condition = factor(condition,levels=1:4,labels=c('pre','anodal','cathodal','sham')),
RT=rt,
s=as.factor(as.numeric(as.character(subject)))) %>% #Forces subject numbers to be between 0 and N
select(s,S,R,condition,RT,subject) %>%
arrange(s,condition,S)
dmc_data = trimmed_data %>%
filter(!is.na(R),  #remove NA values which indicate wrong key responses (27)
phase!="3") %>% #remove second phase (phase=3) - only compare pre vs delayed post
mutate(time = factor((phase=="2") +  (phase=="4")*2,levels=1:2,labels=c('pre','dpost') ),
condition = case_when(
time=="pre" ~ 1,
time=="dpost" & session == "anodal" ~ 2,
time=="dpost" & session == "cathodal" ~ 3,
time=="dpost" & session == "sham" ~ 4
),
condition = factor(condition,levels=1:4,labels=c('pre','anodal','cathodal','sham')),
RT=rt,
s=as.factor(as.numeric(as.character(subject)))) %>% #Forces subject numbers to be between 0 and N
select(s,S,R,condition,RT,subject) %>%
arrange(s,condition,S)
dmc_data
count(dmc_data,condition)
model <- model.dmc(p.map=list(A="1",B=c("condition"),mean_v=c("condition","M"),sd_v=1,t0=c("condition"), st0="1"),
match.map=list(M=list(aa="AA",bb="BB",cc="CC",dd="DD",ee="EE",ff="FF")),
factors=list(S=c("aa","bb","cc","dd","ee","ff"),session=c('pre','anodal','cathodal','sham')),
constants=c(st0=0, mean_v.pre.false = 1,mean_v.anodal.false = 1,
mean_v.cathodal.false = 1,mean_v.cathodal.false = 1),
responses=c(aa="AA",bb="BB",cc="CC",dd="DD",ee="EE",ff="FF"),
type="norm")
model <- model.dmc(p.map=list(A="1",B=c("condition"),mean_v=c("condition","M"),sd_v=1,t0=c("condition"), st0="1"),
match.map=list(M=list(aa="AA",bb="BB",cc="CC",dd="DD",ee="EE",ff="FF")),
factors=list(S=c("aa","bb","cc","dd","ee","ff"),session=c('pre','anodal','cathodal','sham')),
constants=c(st0=0, mean_v.pre.false = 1,mean_v.anodal.false = 1,
mean_v.cathodal.false = 1,mean_v.sham.false = 1),
responses=c(aa="AA",bb="BB",cc="CC",dd="DD",ee="EE",ff="FF"),
type="norm")
model <- model.dmc(p.map=list(A="1",B=c("condition"),mean_v=c("condition","M"),sd_v=1,t0=c("condition"), st0="1"),
match.map=list(M=list(aa="AA",bb="BB",cc="CC",dd="DD",ee="EE",ff="FF")),
factors=list(S=c("aa","bb","cc","dd","ee","ff"),condition=c('pre','anodal','cathodal','sham')),
constants=c(st0=0, mean_v.pre.false = 1,mean_v.anodal.false = 1,
mean_v.cathodal.false = 1,mean_v.sham.false = 1),
responses=c(aa="AA",bb="BB",cc="CC",dd="DD",ee="EE",ff="FF"),
type="norm")
model <- model.dmc(p.map=list(A="1",B=c("condition"),mean_v=c("condition","M"),sd_v="1",t0=c("condition"), st0="1"),
match.map=list(M=list(aa="AA",bb="BB",cc="CC",dd="DD",ee="EE",ff="FF")),
factors=list(S=c("aa","bb","cc","dd","ee","ff"),condition=c('pre','anodal','cathodal','sham')),
constants=c(st0=0, mean_v.pre.false = 1,mean_v.anodal.false = 1,
mean_v.cathodal.false = 1,mean_v.sham.false = 1),
responses=c(aa="AA",bb="BB",cc="CC",dd="DD",ee="EE",ff="FF"),
type="norm")
data_model <- data.model.dmc(as.data.frame(dmc_data),model)
pop.mean <- c(A=1, B.pre=1, B.anodal=1,
B.cathodal=1, B.sham=1,
mean_v.pre.true=1, mean_v.anodal.true=1,
mean_v.cathodal.true=1, mean_v.sham.true=1,
sd_v=1,
t0.pre=.3,t0.anodal=0.3,
t0.cathodal=.3,
t0.sham=.3)
#scales are the same as used in tutorial 4.6 (though note that they are initially specified as very small, and then multiplied by 5 on line 82)
pop.scale <- c(A=5, B.pre=5, B.anodal=5,
B.cathodal=5, B.sham=5,
mean_v.pre.true=5, mean_v.anodal.true=5,
mean_v.cathodal.true=5, mean_v.sham.true=5,
sd_v=2,
t0.pre=.3,t0.anodal=0.3,
t0.cathodal=.3,
t0.sham=.3)
p.prior <- prior.p.dmc(
dists = rep("tnorm",14),
p1=pop.mean,p2=pop.scale,
lower=c(0,0,0,0,0,NA,NA,NA,NA,0,.05,.05,.05,.05),
upper=c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,1,1,1,1,1,1)
)
p.prior <- prior.p.dmc(
dists = rep("tnorm",14),
p1=pop.mean,p2=pop.scale,
lower=c(0,0,0,0,0,NA,NA,NA,NA,0,.05,.05,.05,.05),
upper=c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,1,1,1,1)
)
sigma.prior <- prior.p.dmc(
dists = rep("tnorm", length(p.prior)),
p1=c(A=0, B.pre=0, B.anodal=0,
B.cathodal=0, B.sham=0,
mean_v.pre.true=0, mean_v.anodal.true=0,
mean_v.cathodal.true=0, mean_v.sham.true=0,
sd_v=0,
t0.pre=.3,t0.anodal=0.3,
t0.cathodal=.3,
t0.sham=.3),
p2=c(A=2, B.pre=2, B.anodal=2,
B.cathodal=2, B.sham=2,
mean_v.pre.true=2, mean_v.anodal.true=2,
mean_v.cathodal.true=2, mean_v.sham.true=2,
sd_v=1,
t0.pre=1,t0.anodal=1,
t0.cathodal=1,
t0.sham=1),
lower=rep(0,14),
upper=rep(NA,14)
)
pp.prior <- list(mu.prior, sigma.prior)
mu.prior <- prior.p.dmc(
dists = rep("tnorm",14),
p1=pop.mean,p2=pop.scale,
lower=c(0,0,0,0,0,NA,NA,NA,NA,0,.05,.05,.05,.05),
upper=c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,1,1,1,1)
)
sigma.prior <- prior.p.dmc(
dists = rep("tnorm", length(p.prior)),
p1=c(A=0, B.pre=0, B.anodal=0,
B.cathodal=0, B.sham=0,
mean_v.pre.true=0, mean_v.anodal.true=0,
mean_v.cathodal.true=0, mean_v.sham.true=0,
sd_v=0,
t0.pre=.3,t0.anodal=0.3,
t0.cathodal=.3,
t0.sham=.3),
p2=c(A=2, B.pre=2, B.anodal=2,
B.cathodal=2, B.sham=2,
mean_v.pre.true=2, mean_v.anodal.true=2,
mean_v.cathodal.true=2, mean_v.sham.true=2,
sd_v=1,
t0.pre=1,t0.anodal=1,
t0.cathodal=1,
t0.sham=1),
lower=rep(0,14),
upper=rep(NA,14)
)
pp.prior <- list(mu.prior, sigma.prior)
load(file = "data/derived/dmc_final_samples2_hierarchical_wide_priors.RData")
plot.dmc(final_samples2,hyper=T)
